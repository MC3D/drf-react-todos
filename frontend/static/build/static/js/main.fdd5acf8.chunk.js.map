{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["axios","defaults","xsrfCookieName","xsrfHeaderName","App","props","state","todos","addTodo","bind","e","preventDefault","post","text","due_date","then","res","push","data","setState","catch","error","console","log","get","this","map","todo","key","id","Fragment","onSubmit","type","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"gTAIAA,IAAMC,SAASC,eAAiB,YAChCF,IAAMC,SAASE,eAAiB,c,IA6DjBC,E,YAzDb,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KACDC,MAAQ,CACXC,MAAO,IAGT,EAAKC,QAAU,EAAKA,QAAQC,KAAb,gBANE,E,qEASXC,GAAI,IAAD,OACTA,EAAEC,iBAEFX,IAAMY,KAAN,qBAAiC,CAC/BC,KAAM,uBACNC,SAAU,eAEXC,MAAK,SAAAC,GACF,IAAIT,EAAK,YAAO,EAAKD,MAAMC,OAC3BA,EAAMU,KAAKD,EAAIE,MACf,EAAKC,SAAS,CAACZ,aAElBa,OAAM,SAAAC,GACHC,QAAQC,IAAIF,Q,0CAIG,IAAD,OAClBrB,IAAMwB,IAAN,kBACCT,MAAK,SAAAC,GACF,EAAKG,SAAS,CAACZ,MAAOS,EAAIE,UAE7BE,OAAM,SAAAC,GACHC,QAAQC,IAAIF,Q,+BAKhB,IAAId,EAAQkB,KAAKnB,MAAMC,MAAMmB,KAAI,SAAAC,GAAI,OACnC,wBAAIC,IAAKD,EAAKE,IACZ,2BAAIF,EAAKd,MACT,8BAAOc,EAAKb,cAGhB,OACE,kBAAC,IAAMgB,SAAP,KACE,0BAAMC,SAAUN,KAAKjB,SACnB,2BAAOwB,KAAK,SACZ,6CAEF,4BAAKzB,Q,GAnDK0B,aCKEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM9B,MAAK,SAAA+B,GACjCA,EAAaC,kB","file":"static/js/main.fdd5acf8.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport axios from \"axios\";\nimport './App.css';\n\naxios.defaults.xsrfCookieName = 'csrftoken';\naxios.defaults.xsrfHeaderName = 'X-CSRFToken';\n\nclass App extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      todos: []\n    }\n\n    this.addTodo = this.addTodo.bind(this);\n  }\n\n  addTodo(e) {\n    e.preventDefault();\n\n    axios.post(`/api/v1/todos/new/`, {\n      text: 'Pick up dry cleaning',\n      due_date: '2020-11-15'\n    })\n    .then(res => {\n        let todos = [...this.state.todos];\n        todos.push(res.data);\n        this.setState({todos});\n    })\n    .catch(error => {\n        console.log(error);\n    });\n  }\n\n  componentDidMount() {\n    axios.get(`/api/v1/todos/`)\n    .then(res => {\n        this.setState({todos: res.data});\n    })\n    .catch(error => {\n        console.log(error);\n    });\n  }\n\n  render() {\n    let todos = this.state.todos.map(todo => (\n      <li key={todo.id}>\n        <p>{todo.text}</p>\n        <time>{todo.due_date}</time>\n      </li>\n    ))\n    return (\n      <React.Fragment>\n        <form onSubmit={this.addTodo}>\n          <input type='text'/>\n          <button>Add todo</button>\n        </form>\n        <ul>{todos}</ul>\n      </React.Fragment>\n\n\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}